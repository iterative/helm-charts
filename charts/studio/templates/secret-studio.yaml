apiVersion: v1
kind: Secret
metadata:
  name: studio
  {{ if (not (hasKey .Values "ci")) }} # Add annotation if we're not in CI execution.
  annotations:
    helm.sh/resource-policy: "keep"
    argocd.argoproj.io/sync-options: Delete=false
  {{- end }}
  labels:
    {{- include "studio.labels" . | nindent 4 }}
type: Opaque
stringData:
  DATABASE_USER: {{ .Values.global.postgres.user | quote }}
  DATABASE_PASSWORD: {{ .Values.global.postgres.password | quote }}
  DATABASE_NAME: {{ .Values.global.postgres.databaseName | quote }}

  {{- if ((.Values.pgBouncer).enabled) -}}
  DATABASE_HOST: "pgbouncer.{{ .Release.Namespace }}.svc.cluster.local"
  DATABASE_PORT: {{ .Values.pgBouncer.service.port | quote }}
  {{- else }}
  DATABASE_HOST: {{ .Values.global.postgres.host | quote }}
  DATABASE_PORT: {{ .Values.global.postgres.port | quote }}
  {{- end }}

  {{- if .Values.global.scmProviders.gitlab.clientId }}
  GITLAB_CLIENT_ID: {{ .Values.global.scmProviders.gitlab.clientId | quote }}
  {{- end }}

  {{- if .Values.global.scmProviders.gitlab.secretKey }}
  GITLAB_SECRET_KEY: {{ .Values.global.scmProviders.gitlab.secretKey | quote }}
  {{- end }}

  {{- if .Values.global.scmProviders.gitlab.webhookSecret }}
  GITLAB_WEBHOOK_SECRET: {{ .Values.global.scmProviders.gitlab.webhookSecret | quote }}
  {{- end }}

  {{- if .Values.global.scmProviders.github.clientSecret }}
  GITHUB_APP_SECRET_KEY: {{ .Values.global.scmProviders.github.clientSecret | quote }}
  {{- end }}

  {{- if .Values.global.scmProviders.github.privateKey }}
  GITHUB_APP_PRIVATE_KEY_PEM: |- {{ .Values.global.scmProviders.github.privateKey | nindent 4 }}
  {{- end }}

  # Set secretKey to existing value or generate a random one
  {{- if .Values.global.secretKey }}
  SECRET_KEY: {{ .Values.global.secretKey | quote }}
  {{- else }}
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "studio") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- $secretKey := (get $secretData "SECRET_KEY" | b64dec) | default (randAlphaNum 40) }}
  SECRET_KEY: {{ $secretKey | quote }}
  {{- end }}

  {{- if .Values.global.blobvault.bucket }}
  {{- if .Values.global.blobvault.accessKeyId }}
  BLOBVAULT_AWS_ACCESS_KEY_ID: {{ .Values.global.blobvault.accessKeyId | quote }}
  {{- end }}
  {{- if .Values.global.blobvault.secretAccessKeyId }}
  BLOBVAULT_AWS_SECRET_ACCESS_ID: {{ .Values.global.blobvault.secretAccessKeyId | quote }}
  {{- end }}
  {{- end }}

  {{- if .Values.global.scmProviders.bitbucket.secretKey }}
  BITBUCKET_SECRET_KEY: {{ .Values.global.scmProviders.bitbucket.secretKey | quote }}
  {{- end }}

  {{- if .Values.global.scmProviders.bitbucket.clientId }}
  BITBUCKET_CLIENT_ID: {{ .Values.global.scmProviders.bitbucket.clientId | quote }}
  {{- end }}

  {{- $dvcx := .Values.global.dvcx | default dict }}
  {{- $dvcxClickhouse := $dvcx.clickHouse | default dict }}
  DQL_CH_USER: {{ $dvcxClickhouse.user | default "" | quote }}
  DQL_CH_PASSWORD: {{ $dvcxClickhouse.password | default "" | quote }}
  DVCX_CH_USER: {{ $dvcxClickhouse.user | default "" | quote }}
  DVCX_CH_PASSWORD: {{ $dvcxClickhouse.password | default "" | quote }}
